{"remainingRequest":"C:\\Users\\Dev1\\Documents\\Fontes\\site-scae\\sitescae\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Dev1\\Documents\\Fontes\\site-scae\\sitescae\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Dev1\\Documents\\Fontes\\site-scae\\sitescae\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Dev1\\Documents\\Fontes\\site-scae\\sitescae\\src\\views\\home\\Scae.vue?vue&type=template&id=253adf1a&scoped=true&","dependencies":[{"path":"C:\\Users\\Dev1\\Documents\\Fontes\\site-scae\\sitescae\\src\\views\\home\\Scae.vue","mtime":1654778913735},{"path":"C:\\Users\\Dev1\\Documents\\Fontes\\site-scae\\sitescae\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1654273329654},{"path":"C:\\Users\\Dev1\\Documents\\Fontes\\site-scae\\sitescae\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1654273349614},{"path":"C:\\Users\\Dev1\\Documents\\Fontes\\site-scae\\sitescae\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1654273329654},{"path":"C:\\Users\\Dev1\\Documents\\Fontes\\site-scae\\sitescae\\node_modules\\vue-loader\\lib\\index.js","mtime":1654273349611}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICBbCiAgICAgIF9jKCJIZWFkZXIiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAibG9nby1kYXJrIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNsb3Q6ICJsb2dvLWRhcmsiLAogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWFnZXMvbG9nby9sb2dvc2NhZS5wbmciKQogICAgICAgICAgfSwKICAgICAgICAgIHNsb3Q6ICJsb2dvLWRhcmsiCiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm4tc2xpZGVyLWFyZWEiLCBhdHRyczogeyBpZDogImhvbWUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICJzbGlkZSBzbGlkZS1zdHlsZS0yIHNsaWRlci1wYXJhbGF4IGQtZmxleCBhbGlnbi1jZW50ZXIganVzdGlmeS1jZW50ZXIgYmdfaW1hZ2UgYmdfaW1hZ2UtLTMyIiwKICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtYmxhY2stb3ZlcmxheSI6ICIyIiB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiQmFubmVyIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImgxIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkaW5nLXRpdGxlIHRoZW1lLWdyYWRpZW50IiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc2xvdDogImhlYWRpbmctdGl0bGUiIH0sCiAgICAgICAgICAgICAgICAgIHNsb3Q6ICJoZWFkaW5nLXRpdGxlIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIlNDQUUiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImRlc2NyaXB0aW9uIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc2xvdDogImRlc2NyaXB0aW9uIiB9LAogICAgICAgICAgICAgICAgICBzbG90OiAiZGVzY3JpcHRpb24iCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiR2VzdMOjbyBkZSBDYXJ0ZWlyYSBkZSBMb3RlYW1lbnRvcy4iKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKAogICAgICAgICJ2LXJvdyIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJzcGFjaW5nLXRleHQgcHQtLTEwMCIsCiAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICIjRkFGQUZBIiB9LAogICAgICAgICAgYXR0cnM6IHsgaWQ6ICJzZXJ2acOnb3MiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJ2LWNvbCIsIHsgc3RhdGljQ2xhc3M6ICJwbC0xMiIsIGF0dHJzOiB7IGxnOiAiMTIiIH0gfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInNlY3Rpb24tdGl0bGUgdGV4dC1sZWZ0IG1iLS0wIG1iX3NtLS0wIG1iX21kLS0wIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImgyIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkdlc3TDo28gZSBBdXRvbWHDp8OjbyBkYSBDb2JyYW7Dp2EgZG9zIHNldXMgTG90ZWFtZW50b3MiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgQ29uaGXDp2EgYXMgdmFudGFnZW5zIHF1ZSBvIHNlcnZpw6dvIGRhIFNDQUUgdHJheiBwYXJhIHZvY8OqLiAiCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBBdXRvbWF0aXplIG8gZ2VyZW5jaWFtZW50byBkb3MgcmVjZWLDrXZlaXMgZG9zIHNldXMgbG90ZXMgYXRyYXbDqXMgZG8gbm9zc28gc2lzdGVtYS4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICJybi1jb250ZW50LWJveC1hcmVhIHJuLWNvbnRlbnQtYm94LXN0eWxlLS0xIGJnX2NvbG9yLS0xIHB0LS01MCIsCiAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICIjRkFGQUZBIiB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInYtcm93IiwKICAgICAgICAgICAgeyBhdHRyczogeyBqdXN0aWZ5OiAiY2VudGVyIiwgYWxpZ246ICJjZW50ZXIiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInYtY29sIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgbGc6ICI0IiwgbWQ6ICIxMiIsIGNvbHM6ICIxMiIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJkZXNpZ25lci10aHVtYm5haWwgaW1nIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltYWdlcy9zZXJ2aWNvL2NvbnRyYXRvLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJGZWF0dXJlZCBJbWFnZXMiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInYtY29sIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtdF9sZy0tNTAgbXRfbWQtLTMwIG10X3NtLS0zMCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IG1kOiAiMTIiLCBsZzogIjYiLCBjb2xzOiAiMTIiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInN1YnRpdGxlIiB9KSwKICAgICAgICAgICAgICAgICAgICBfYygiaDIiLCB7IHN0YXRpY0NsYXNzOiAiZm9udFdlaWdodDUwMCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJDb250cmF0b3MiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiIEFvIHJlY2ViZXIgYSBwcm9wb3N0YSBkbyBzZXUgY29ycmV0b3IgZSBjYWRhc3RyYXIgbm8gc2lzdGVtYSB2b2PDqiBpbmljaWEgdG9kbyBvIGNvbnRyb2xlIGRhIG9wZXJhw6fDo28sIGRlc2RlIGEgZWxhYm9yYcOnw6NvIGRhIHByb21lc3NhIGRlIGNvbXByYSBlIHZlbmRhLCBnZXJhciBhIGVudHJhZGEgY29tIG9zIHZhbG9yZXMgcGFyYSBhIGxvdGVhZG9yYSBvdSBwYXJhIGEgdmVuZGVkb3JhLCBnZXJhciBwYXJjZWxhcyBkbyBmaW5hbmNpYW1lbnRvLCBhZGl0YXIgY29udHJhdG9zLCBlbnZpbyBkZSBib2xldG9zIGUgZS1tYWlscyBhdXRvbcOhdGljb3MuICIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgInJuLWNvbnRlbnQtYm94LWFyZWEgcm4tY29udGVudC1ib3gtc3R5bGUtLTEgYmdfY29sb3ItLTEiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsgImJhY2tncm91bmQtY29sb3IiOiAiI0ZBRkFGQSIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJ2LXJvdyIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsganVzdGlmeTogImNlbnRlciIsIGFsaWduOiAiY2VudGVyIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJ2LWNvbCIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXRfbGctLTUwIG10X21kLS0zMCBtdF9zbS0tMzAiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBtZDogIjEyIiwgbGc6ICI2IiwgY29sczogIjEyIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJzdWJ0aXRsZSIgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogImZvbnRXZWlnaHQ1MDAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiQ29icmFuw6dhcyBhdXRvbWF0aXphZGFzIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIiBDb250cm9sZSBjb20gbWFpcyBwcmVjaXPDo28gbyBzZXUgZmx1eG8gZGUgY2FpeGEuIE7Ds3MgZW1pdGltb3MgYXMgY29icmFuw6dhcywgZW52aWFtb3MgcG9yIGUtbWFpbCBlIFdoYXRzYXBwIGRlIGZvcm1hIGF1dG9tw6F0aWNhLiBWb2PDqiBhaW5kYSB0ZW0gYWNlc3NvIGEgcsOpZ3VhIGRlIGNvYnJhbsOnYSBjb20gdG9kb3Mgb3Mgc3RhdHVzIGRvcyBwYWdhbWVudG9zIGUgaW5hZGltcGzDqm5jaWEgcG9yIHRlbXBvIGRlIGF0cmFzbyBlbSB0ZW1wbyByZWFsLiAiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInYtY29sIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgbGc6ICI0IiwgbWQ6ICIxMiIsIGNvbHM6ICIxMiIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJkZXNpZ25lci10aHVtYm5haWwgaW1nIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltYWdlcy9zZXJ2aWNvL2NvYnJhbmNhLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJGZWF0dXJlZCBJbWFnZXMiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICJybi1jb250ZW50LWJveC1hcmVhIHJuLWNvbnRlbnQtYm94LXN0eWxlLS0xIGJnX2NvbG9yLS0xIiwKICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNGQUZBRkEiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAidi1yb3ciLAogICAgICAgICAgICB7IGF0dHJzOiB7IGp1c3RpZnk6ICJjZW50ZXIiLCBhbGlnbjogImNlbnRlciIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAidi1jb2wiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImRpc3BsYXkiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBsZzogIjQiLCBtZDogIjEyIiwgY29sczogIjEyIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImRlc2lnbmVyLXRodW1ibmFpbCBpbWciIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1hZ2VzL3NlcnZpY28vY2xpZW50ZS5zdmciKSwKICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiRmVhdHVyZWQgSW1hZ2VzIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJ2LWNvbCIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXRfbGctLTUwIG10X21kLS0zMCBtdF9zbS0tMzAiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBtZDogIjEyIiwgbGc6ICI2IiwgY29sczogIjEyIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJzdWJ0aXRsZSIgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogImZvbnRXZWlnaHQ1MDAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUMOhZ2luYSBkbyBjb21wcmFkb3IgZG8gTG90ZSIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICIgU2V1IGNsaWVudGUgcG9kZSBlbWl0aXIgYSAyYSB2aWEgZGUgYm9sZXRvLCBnZXJhciBib2xldG8gZGUgcXVpdGHDp8OjbyBlIGFudGVjaXBhw6fDo28gZGUgcGFyY2VsYXMsIGFsw6ltIGRlIGRlc2ZydXRhciBkbyB0b3RhbCBjb250cm9sZSBkZSBzZXVzIHBhZ2FtZW50b3MgZSBlbWl0aXIgbyBoaXN0w7NyaWNvIGFudWFsIHBhcmEgZGVjbGFyYcOnw6NvIGRvIElSUEYuIENvbSBhIFNjYWUgdm9jw6ogZGlzcG9uaWJpbGl6YSB1bWEgcMOhZ2luYSBwYXJhIG8gY29tcHJhZG9yIGNvbSB0b2RhcyBhcyBpbmZvcm1hw6fDtWVzIHF1ZSBlbGUgcHJlY2lzYS4gQ29tIGlzc28sIHJlZHV6YSB0cmFiYWxob3Mgb3BlcmFjaW9uYWlzIGRvIHNldSB0aW1lLiAiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICJybi1jb250ZW50LWJveC1hcmVhIHJuLWNvbnRlbnQtYm94LXN0eWxlLS0xIGJnX2NvbG9yLS0xIiwKICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNGQUZBRkEiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAidi1yb3ciLAogICAgICAgICAgICB7IGF0dHJzOiB7IGp1c3RpZnk6ICJjZW50ZXIiLCBhbGlnbjogImNlbnRlciIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAidi1jb2wiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm10X2xnLS01MCBtdF9tZC0tMzAgbXRfc20tLTMwIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgbWQ6ICIxMiIsIGxnOiAiNiIsIGNvbHM6ICIxMiIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAic3VidGl0bGUiIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJmb250V2VpZ2h0NTAwIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkRhc2hib2FyZHMgZSBLUElTIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIiBDb20gRGFzaGJvYXJkcyBlIEtQSVMgZGEgU2NhZSDDqSBwb3Nzw612ZWwgdmlzdWFsaXphciBkYWRvcyBkZSBmYXR1cmFtZW50byBtZW5zYWwsIHZlbmRhcyBwb3IgY29ycmV0b3IsIGluYWRpbXBsw6puY2lhIG1lbnNhbCwgYWNvcmRvcyByZWFsaXphZG9zIGUgbXVpdG8gbWFpcywgdHVkbyBlbSBmb3JtYXRvIGdyw6FmaWNvIGRlIGbDoWNpbCBlIHLDoXBpZGEgbGVpdHVyYSBkYSBzaXR1YcOnw6NvIGRvIHNldSBsb3RlYW1lbnRvIG91IGRhIHN1YSBlbXByZXNhLiBDb20gb3MgcmVzdWx0YWRvcyBkZSBkZXNlbXBlbmhvIGZpY2EgZsOhY2lsIHRyYcOnYXIgZSBhY29tcGFuaGFyIMOgcyBtZXRhcyBkYSBlbXByZXNhLCBpbmNvcnBvcmFuZG8gb3MgZGFkb3MgZmluYW5jZWlyb3MgZSBvcGVyYWNpb25haXMgYW8gcHJvY2Vzc28gZGUgbmVnw7NjaW8uICIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAidi1jb2wiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImRpc3BsYXkiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBsZzogIjQiLCBtZDogIjEyIiwgY29sczogIjEyIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImRlc2lnbmVyLXRodW1ibmFpbCBpbWciIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWciLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1hZ2VzL3NlcnZpY28vZGFzaGJvYXJkczMuc3ZnIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIkZlYXR1cmVkIEltYWdlcyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJuLXBvcnRmb2xpby1hcmVhIHJuLXNlY3Rpb24tZ2FwIGJnX2NvbG9yLS0xIiwKICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNGQUZBRkEiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInBvcnRmb2xpby1zYWNvdXNlbC1pbm5lciIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInYtY29udGFpbmVyIiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInYtcm93IiwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygidi1jb2wiLCB7IGF0dHJzOiB7IGxnOiAiMTIiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNlY3Rpb24tdGl0bGUgdGV4dC1jZW50ZXIgbWItLTIwIG1iX3NtLS0wIG1iX21kLS0wIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogImhlYWRpbmctdGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJOb3Nzb3MgUGxhbm9zIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAidi1jb250YWluZXIiLAogICAgICAgICAgICAgICAgeyBhdHRyczogeyAiZ3JpZC1saXN0LW1kIjogIiIsICJ0ZXh0LXhzLWNlbnRlciI6ICIiIH0gfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInYtbGF5b3V0IiwKICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IHJvdzogIiIsIHdyYXA6ICIiIH0gfSwKICAgICAgICAgICAgICAgICAgICBbX2MoInYtZmxleCIsIHsgYXR0cnM6IHsgeHMxMjogIiIgfSB9LCBbX2MoIlNlcnZpY2UiKV0sIDEpXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXQogICAgICApLAogICAgICBfYygiZGl2IiwgW19jKCJ2LWNvbnRhaW5lciIsIFtfYygiQ2FsbFRvQWN0aW9uVHdvIildLCAxKV0sIDEpLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAicm4tdGVhbS1hcmVhIHJuLXNlY3Rpb24tZ2FwIGJnX2NvbG9yLS0xIiB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAidi1jb250YWluZXIiLAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAidi1yb3ciLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygidi1jb2wiLCB7IGF0dHJzOiB7IGxnOiAiMTIiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICJzZWN0aW9uLXRpdGxlIHRleHQtY2VudGVyIG1iLS0wIG1iX3NtLS0wIG1iX21kLS0wIgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogImhlYWRpbmctdGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlNlcnZpw6dvcyBkZSBHZXN0w6NvIGRlIExvdGVhbWVudG8iKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiU2VydmljZU1hbmFnZW1lbnQiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicm4tcG9ydGZvbGlvLWFyZWEgcm4tc2VjdGlvbi1nYXAgYmdfY29sb3ItLTEiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsgImJhY2tncm91bmQtY29sb3IiOiAiI0ZBRkFGQSIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicG9ydGZvbGlvLXNhY291c2VsLWlubmVyIiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAidi1jb250YWluZXIiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAidi1yb3ciLAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJ2LWNvbCIsIHsgYXR0cnM6IHsgbGc6ICIxMiIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic2VjdGlvbi10aXRsZSB0ZXh0LWNlbnRlciBtYi0tMjAgbWJfc20tLTAgbWJfbWQtLTAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDIiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZy10aXRsZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlBsYW5vcyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInYtY29udGFpbmVyIiwKICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgImdyaWQtbGlzdC1tZCI6ICIiLCAidGV4dC14cy1jZW50ZXIiOiAiIiB9IH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJ2LWxheW91dCIsCiAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyByb3c6ICIiLCB3cmFwOiAiIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJ2LWZsZXgiLAogICAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IHhzMTI6ICIiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgW19jKCJTZXJ2aWNlU29mdHdhcmUiKV0sCiAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYWJvdXQtYXJlYSBybi1zZWN0aW9uLWdhcCBiZ19jb2xvci0tMSIsCiAgICAgICAgICBhdHRyczogeyBpZDogInNvYnJlIiB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiQWJvdXQiLCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ3LTEwMCIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNsb3Q6ICJ0aHVtLWltZyIsCiAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWFnZXMvYWJvdXQvYWJvdXQtMy5qcGciKSwKICAgICAgICAgICAgICAgIGFsdDogIkFib3V0IEltYWdlcyIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHNsb3Q6ICJ0aHVtLWltZyIKICAgICAgICAgICAgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicm4tdGVhbS1hcmVhIHJuLXNlY3Rpb24tZ2FwIGJnX2NvbG9yLS0xIiwKICAgICAgICAgIGF0dHJzOiB7IGlkOiAiY2xpZW50ZXMiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAidi1jb250YWluZXIiLAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAidi1yb3ciLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygidi1jb2wiLCB7IGF0dHJzOiB7IGxnOiAiMTIiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICJzZWN0aW9uLXRpdGxlIHRleHQtY2VudGVyIG1iLS0yMCBtYl9zbS0tMCBtYl9tZC0tMCIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkaW5nLXRpdGxlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJDbGllbnRlcyIpCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJUZWFtRm91ciIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJhYm91dC1hcmVhIHJuLXNlY3Rpb24tZ2FwIGJnX2NvbG9yLS0xIiwKICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNGQUZBRkEiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJDb250YWN0IiwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidy0xMDAiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzbG90OiAidGh1bS1pbWciLAogICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1hZ2VzL2Fib3V0L2Fib3V0LTMuanBnIiksCiAgICAgICAgICAgICAgICBhbHQ6ICJBYm91dCBJbWFnZXMiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBzbG90OiAidGh1bS1pbWciCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygiRm9vdGVyIikKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}