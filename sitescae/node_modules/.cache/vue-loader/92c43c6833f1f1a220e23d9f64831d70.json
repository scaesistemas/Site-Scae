{"remainingRequest":"C:\\Users\\Dev1\\Documents\\Fontes\\site-scae_of\\sitescae\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Dev1\\Documents\\Fontes\\site-scae_of\\sitescae\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Dev1\\Documents\\Fontes\\site-scae_of\\sitescae\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Dev1\\Documents\\Fontes\\site-scae_of\\sitescae\\src\\views\\home\\Scae.vue?vue&type=template&id=253adf1a&scoped=true&","dependencies":[{"path":"C:\\Users\\Dev1\\Documents\\Fontes\\site-scae_of\\sitescae\\src\\views\\home\\Scae.vue","mtime":1654546919869},{"path":"C:\\Users\\Dev1\\Documents\\Fontes\\site-scae_of\\sitescae\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1654273329654},{"path":"C:\\Users\\Dev1\\Documents\\Fontes\\site-scae_of\\sitescae\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1654273349614},{"path":"C:\\Users\\Dev1\\Documents\\Fontes\\site-scae_of\\sitescae\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1654273329654},{"path":"C:\\Users\\Dev1\\Documents\\Fontes\\site-scae_of\\sitescae\\node_modules\\vue-loader\\lib\\index.js","mtime":1654273349611}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}